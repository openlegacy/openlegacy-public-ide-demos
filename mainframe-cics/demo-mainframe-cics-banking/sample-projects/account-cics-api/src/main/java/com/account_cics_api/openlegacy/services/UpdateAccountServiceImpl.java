package com.account_cics_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_cics_sdk.openlegacy.Uactcs9;
import com.account_cics_sdk.openlegacy.Uactcs9Dfhcommarea;
import com.account_cics_sdk.openlegacy.Uactcs9InputRecord;
import com.account_cics_sdk.openlegacy.Uactcs9OutputRecord;
import com.account_cics_sdk.openlegacy.Uactcs9UpdateIn;
import com.account_cics_sdk.openlegacy.Uactcs9UpdateOut;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test UpdateAccountServiceTest.
 *  The interface UpdateAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "UpdateAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class UpdateAccountServiceImpl implements UpdateAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getUpdateAccount", entities = {
            @EntityMapping(alias="uactcs9", entity=com.account_cics_sdk.openlegacy.Uactcs9.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "uactcs9", expression = "uactcs9")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "uactcs9", expression = "uactcs9")})
    public UpdateAccountOut getUpdateAccount(UpdateAccountIn updateAccountIn) throws Exception {
        UpdateAccountOut updateAccountOut = new UpdateAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountCicsSdkSession = applicationContext.getBean("accountCicsSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Uactcs9 uactcs9 = serviceBinder.bindInputs(this, "getUpdateAccount", "uactcs9", new Uactcs9(), updateAccountIn);
            uactcs9 = accountCicsSdkSession.doAction(ActionUtil.getRpcAction(Uactcs9.class), uactcs9);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            updateAccountOut = serviceBinder.bindOutput(this, "getUpdateAccount", updateAccountOut, new String[]{"updateAccountIn", "uactcs9"}, updateAccountIn, uactcs9);
            /* autogenerated - output block end */;

            return updateAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountCicsSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
