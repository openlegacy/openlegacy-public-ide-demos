package com.account_cics_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_cics_sdk.openlegacy.Gactcs9;
import com.account_cics_sdk.openlegacy.Gactcs9AccountDetails;
import com.account_cics_sdk.openlegacy.Gactcs9AccountOut;
import com.account_cics_sdk.openlegacy.Gactcs9Gactcs9Input;
import com.account_cics_sdk.openlegacy.Gactcs9Gactcs9Output;
import com.account_cics_sdk.openlegacy.Gactcs9InPut;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test GetAccountServiceTest.
 *  The interface GetAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "GetAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class GetAccountServiceImpl implements GetAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getGetAccount", entities = {
            @EntityMapping(alias="gactcs9", entity=com.account_cics_sdk.openlegacy.Gactcs9.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "gactcs9.gactcs9Input", expression = "gactcs9Input")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "gactcs9Output", expression = "gactcs9.gactcs9Output")})
    public GetAccountOut getGetAccount(GetAccountIn getAccountIn) throws Exception {
        GetAccountOut getAccountOut = new GetAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountCicsSdkSession = applicationContext.getBean("accountCicsSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Gactcs9 gactcs9 = serviceBinder.bindInputs(this, "getGetAccount", "gactcs9", new Gactcs9(), getAccountIn);
            gactcs9 = accountCicsSdkSession.doAction(ActionUtil.getRpcAction(Gactcs9.class), gactcs9);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            getAccountOut = serviceBinder.bindOutput(this, "getGetAccount", getAccountOut, new String[]{"getAccountIn", "gactcs9"}, getAccountIn, gactcs9);
            /* autogenerated - output block end */;

            return getAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountCicsSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
