package com.account_cics_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_cics_sdk.openlegacy.Oactcs9;
import com.account_cics_sdk.openlegacy.Oactcs9AccountOut;
import com.account_cics_sdk.openlegacy.Oactcs9Dfhcommarea;
import com.account_cics_sdk.openlegacy.Oactcs9InPut;
import com.account_cics_sdk.openlegacy.Oactcs9OutRecord;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test OpenAccountServiceTest.
 *  The interface OpenAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "OpenAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class OpenAccountServiceImpl implements OpenAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getOpenAccount", entities = {
            @EntityMapping(alias="oactcs9", entity=com.account_cics_sdk.openlegacy.Oactcs9.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "oactcs9", expression = "oactcs9")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "oactcs9", expression = "oactcs9")})
    public OpenAccountOut getOpenAccount(OpenAccountIn openAccountIn) throws Exception {
        OpenAccountOut openAccountOut = new OpenAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountCicsSdkSession = applicationContext.getBean("accountCicsSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Oactcs9 oactcs9 = serviceBinder.bindInputs(this, "getOpenAccount", "oactcs9", new Oactcs9(), openAccountIn);
            oactcs9 = accountCicsSdkSession.doAction(ActionUtil.getRpcAction(Oactcs9.class), oactcs9);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            openAccountOut = serviceBinder.bindOutput(this, "getOpenAccount", openAccountOut, new String[]{"openAccountIn", "oactcs9"}, openAccountIn, oactcs9);
            /* autogenerated - output block end */;

            return openAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountCicsSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
