package com.policy_as400_cobol_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.policy_as400_cobol_sdk.openlegacy.POL2ADD;
import com.policy_as400_cobol_sdk.openlegacy.POL2ADDPol2addInput;
import com.policy_as400_cobol_sdk.openlegacy.POL2ADDPol2addOutput;
import com.policy_as400_cobol_sdk.openlegacy.POL2ADDPolicyRecOut;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  The interface AddPolicyService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "AddPolicy")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class AddPolicyServiceImpl implements AddPolicyService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getAddPolicy", entities = {
            @EntityMapping(alias="pOL2ADD", entity=com.policy_as400_cobol_sdk.openlegacy.POL2ADD.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "pOL2ADD.pol2addInput", expression = "pol2addInput")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "pol2addOutput", expression = "pOL2ADD.pol2addOutput")})
    public AddPolicyOut getAddPolicy(AddPolicyIn addPolicyIn) throws Exception {
        AddPolicyOut addPolicyOut = new AddPolicyOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession policyAs400CobolSdkSession = applicationContext.getBean("policyAs400CobolSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            POL2ADD pOL2ADD = serviceBinder.bindInputs(this, "getAddPolicy", "pOL2ADD", new POL2ADD(), addPolicyIn);
            pOL2ADD = policyAs400CobolSdkSession.doAction(ActionUtil.getRpcAction(POL2ADD.class), pOL2ADD);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            addPolicyOut = serviceBinder.bindOutput(this, "getAddPolicy", addPolicyOut, new String[]{"addPolicyIn", "pOL2ADD"}, addPolicyIn, pOL2ADD);
            /* autogenerated - output block end */;

            return addPolicyOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            policyAs400CobolSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
