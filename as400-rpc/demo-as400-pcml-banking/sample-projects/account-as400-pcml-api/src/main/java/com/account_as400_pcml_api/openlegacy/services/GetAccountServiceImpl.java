package com.account_as400_pcml_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_as400_pcml_sdk.openlegacy.Gactcs6X;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test GetAccountServiceTest.
 *  The interface GetAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "GetAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class GetAccountServiceImpl implements GetAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getGetAccount", entities = {
            @EntityMapping(alias="gactcs6X", entity=com.account_as400_pcml_sdk.openlegacy.Gactcs6X.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "gactcs6X.input", expression = "input"),
            @BindTo(endpoint = "gactcs6X.account", expression = "account"),
            @BindTo(endpoint = "gactcs6X.custid", expression = "custid"),
            @BindTo(endpoint = "gactcs6X.custname", expression = "custname"),
            @BindTo(endpoint = "gactcs6X.iban", expression = "iban"),
            @BindTo(endpoint = "gactcs6X.bankid", expression = "bankid"),
            @BindTo(endpoint = "gactcs6X.brnchid", expression = "brnchid"),
            @BindTo(endpoint = "gactcs6X.cntrycd", expression = "cntrycd"),
            @BindTo(endpoint = "gactcs6X.typcd", expression = "typcd"),
            @BindTo(endpoint = "gactcs6X.subtypcd", expression = "subtypcd"),
            @BindTo(endpoint = "gactcs6X.typename", expression = "typename"),
            @BindTo(endpoint = "gactcs6X.typedesc", expression = "typedesc"),
            @BindTo(endpoint = "gactcs6X.balance", expression = "balance"),
            @BindTo(endpoint = "gactcs6X.currency", expression = "currency"),
            @BindTo(endpoint = "gactcs6X.crtdt", expression = "crtdt"),
            @BindTo(endpoint = "gactcs6X.updtdt", expression = "updtdt"),
            @BindTo(endpoint = "gactcs6X.locked", expression = "locked")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "input", expression = "gactcs6X.input"),
            @BindFrom(endpoint = "account", expression = "gactcs6X.account"),
            @BindFrom(endpoint = "custid", expression = "gactcs6X.custid"),
            @BindFrom(endpoint = "custname", expression = "gactcs6X.custname"),
            @BindFrom(endpoint = "iban", expression = "gactcs6X.iban"),
            @BindFrom(endpoint = "bankid", expression = "gactcs6X.bankid"),
            @BindFrom(endpoint = "brnchid", expression = "gactcs6X.brnchid"),
            @BindFrom(endpoint = "cntrycd", expression = "gactcs6X.cntrycd"),
            @BindFrom(endpoint = "typcd", expression = "gactcs6X.typcd"),
            @BindFrom(endpoint = "subtypcd", expression = "gactcs6X.subtypcd"),
            @BindFrom(endpoint = "typename", expression = "gactcs6X.typename"),
            @BindFrom(endpoint = "typedesc", expression = "gactcs6X.typedesc"),
            @BindFrom(endpoint = "balance", expression = "gactcs6X.balance"),
            @BindFrom(endpoint = "currency", expression = "gactcs6X.currency"),
            @BindFrom(endpoint = "crtdt", expression = "gactcs6X.crtdt"),
            @BindFrom(endpoint = "updtdt", expression = "gactcs6X.updtdt"),
            @BindFrom(endpoint = "locked", expression = "gactcs6X.locked")})
    public GetAccountOut getGetAccount(GetAccountIn getAccountIn) throws Exception {
        GetAccountOut getAccountOut = new GetAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountAs400PcmlSdkSession = applicationContext.getBean("accountAs400PcmlSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Gactcs6X gactcs6X = serviceBinder.bindInputs(this, "getGetAccount", "gactcs6X", new Gactcs6X(), getAccountIn);
            gactcs6X = accountAs400PcmlSdkSession.doAction(ActionUtil.getRpcAction(Gactcs6X.class), gactcs6X);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            getAccountOut = serviceBinder.bindOutput(this, "getGetAccount", getAccountOut, new String[]{"getAccountIn", "gactcs6X"}, getAccountIn, gactcs6X);
            /* autogenerated - output block end */;

            return getAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountAs400PcmlSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
