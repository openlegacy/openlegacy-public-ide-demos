package com.account_as400_pcml_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_as400_pcml_sdk.openlegacy.Uactcs6X;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test UpdateAccountServiceTest.
 *  The interface UpdateAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "UpdateAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class UpdateAccountServiceImpl implements UpdateAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getUpdateAccount", entities = {
            @EntityMapping(alias="uactcs6X", entity=com.account_as400_pcml_sdk.openlegacy.Uactcs6X.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "uactcs6X.dsAccount", expression = "dsAccount"),
            @BindTo(endpoint = "uactcs6X.dsCustid", expression = "dsCustid"),
            @BindTo(endpoint = "uactcs6X.dsCustname", expression = "dsCustname"),
            @BindTo(endpoint = "uactcs6X.dsIban", expression = "dsIban"),
            @BindTo(endpoint = "uactcs6X.dsBankid", expression = "dsBankid"),
            @BindTo(endpoint = "uactcs6X.dsBranchid", expression = "dsBranchid"),
            @BindTo(endpoint = "uactcs6X.dsCntrycd", expression = "dsCntrycd"),
            @BindTo(endpoint = "uactcs6X.dsTypcd", expression = "dsTypcd"),
            @BindTo(endpoint = "uactcs6X.dsSubtypcd", expression = "dsSubtypcd"),
            @BindTo(endpoint = "uactcs6X.dsTypename", expression = "dsTypename"),
            @BindTo(endpoint = "uactcs6X.dsTypedesc", expression = "dsTypedesc"),
            @BindTo(endpoint = "uactcs6X.dsBalance", expression = "dsBalance"),
            @BindTo(endpoint = "uactcs6X.dsCurrency", expression = "dsCurrency"),
            @BindTo(endpoint = "uactcs6X.dsCrtdt", expression = "dsCrtdt"),
            @BindTo(endpoint = "uactcs6X.dsUpdtdt", expression = "dsUpdtdt"),
            @BindTo(endpoint = "uactcs6X.dsLocked", expression = "dsLocked"),
            @BindTo(endpoint = "uactcs6X.output", expression = "output")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "dsAccount", expression = "uactcs6X.dsAccount"),
            @BindFrom(endpoint = "dsCustid", expression = "uactcs6X.dsCustid"),
            @BindFrom(endpoint = "dsCustname", expression = "uactcs6X.dsCustname"),
            @BindFrom(endpoint = "dsIban", expression = "uactcs6X.dsIban"),
            @BindFrom(endpoint = "dsBankid", expression = "uactcs6X.dsBankid"),
            @BindFrom(endpoint = "dsBranchid", expression = "uactcs6X.dsBranchid"),
            @BindFrom(endpoint = "dsCntrycd", expression = "uactcs6X.dsCntrycd"),
            @BindFrom(endpoint = "dsTypcd", expression = "uactcs6X.dsTypcd"),
            @BindFrom(endpoint = "dsSubtypcd", expression = "uactcs6X.dsSubtypcd"),
            @BindFrom(endpoint = "dsTypename", expression = "uactcs6X.dsTypename"),
            @BindFrom(endpoint = "dsTypedesc", expression = "uactcs6X.dsTypedesc"),
            @BindFrom(endpoint = "dsBalance", expression = "uactcs6X.dsBalance"),
            @BindFrom(endpoint = "dsCurrency", expression = "uactcs6X.dsCurrency"),
            @BindFrom(endpoint = "dsCrtdt", expression = "uactcs6X.dsCrtdt"),
            @BindFrom(endpoint = "dsUpdtdt", expression = "uactcs6X.dsUpdtdt"),
            @BindFrom(endpoint = "dsLocked", expression = "uactcs6X.dsLocked"),
            @BindFrom(endpoint = "output", expression = "uactcs6X.output")})
    public UpdateAccountOut getUpdateAccount(UpdateAccountIn updateAccountIn) throws Exception {
        UpdateAccountOut updateAccountOut = new UpdateAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountAs400PcmlSdkSession = applicationContext.getBean("accountAs400PcmlSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Uactcs6X uactcs6X = serviceBinder.bindInputs(this, "getUpdateAccount", "uactcs6X", new Uactcs6X(), updateAccountIn);
            uactcs6X = accountAs400PcmlSdkSession.doAction(ActionUtil.getRpcAction(Uactcs6X.class), uactcs6X);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            updateAccountOut = serviceBinder.bindOutput(this, "getUpdateAccount", updateAccountOut, new String[]{"updateAccountIn", "uactcs6X"}, updateAccountIn, uactcs6X);
            /* autogenerated - output block end */;

            return updateAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountAs400PcmlSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
