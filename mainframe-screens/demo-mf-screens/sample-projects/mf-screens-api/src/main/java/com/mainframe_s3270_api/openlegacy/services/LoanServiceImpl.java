package com.mainframe_s3270_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.mf_screens_sdk.openlegacy.Loaninq1;
import com.mf_screens_sdk.openlegacy.Loaninq2;
import org.openlegacy.core.terminal.TerminalSession;
import org.openlegacy.core.terminal.actions.TerminalActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  Can be tested by invoking the test LoanServiceTest.
 *  The interface LoanService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "Loan")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class LoanServiceImpl implements LoanService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getLoan", entities = {
            @EntityMapping(alias="loaninq1", entity=com.mf_screens_sdk.openlegacy.Loaninq1.class),
            @EntityMapping(alias="loaninq2", entity=com.mf_screens_sdk.openlegacy.Loaninq2.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "loaninq1.loanNumber", expression = "loanNumber")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "loaninq2", expression = "loaninq2")})
    public LoanOut getLoan(LoanIn loanIn) throws Exception {
        LoanOut loanOut = new LoanOut();
        /* autogenerated - sessions block start*/
        ;
        TerminalSession mfScreensSdkSession = applicationContext.getBean("mfScreensSdkSession", TerminalSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            Loaninq1 loaninq1 = serviceBinder.bindInputs(this, "getLoan", "loaninq1", mfScreensSdkSession.getEntity(Loaninq1.class), loanIn);
            mfScreensSdkSession.doAction(ActionUtil.getScreenAction(), loaninq1);

            Loaninq2 loaninq2 = serviceBinder.bindInputs(this, "getLoan", "loaninq2", mfScreensSdkSession.getEntity(Loaninq2.class), loanIn);
            mfScreensSdkSession.doAction(ActionUtil.getScreenAction(), loaninq2);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            loanOut = serviceBinder.bindOutput(this, "getLoan", loanOut, new String[]{"loanIn", "loaninq1", "loaninq2"}, loanIn, loaninq1, loaninq2);
            /* autogenerated - output block end */;

            return loanOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            mfScreensSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
