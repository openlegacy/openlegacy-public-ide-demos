package com.account_oracle_api.openlegacy.services;

import org.apache.commons.lang3.StringUtils;
import com.account_oracle_sdk.openlegacy.UpdateAccount;
import com.account_oracle_sdk.openlegacy.UpdateAccount.BankAccountObj;
import java.math.BigDecimal;
import org.openlegacy.core.rpc.RpcSession;
import org.openlegacy.core.rpc.actions.RpcActions;

import org.openlegacy.core.annotations.services.*;
import org.openlegacy.core.annotations.OpenlegacyDesigntime;
import org.openlegacy.impl.services.ws.ServiceBinder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.context.ApplicationContext;
import org.openlegacy.utils.ActionUtil;

/**
 *  A service implementation which invokes OpenLegacy API, and returns a service output.
 *  The code below should be customize to perform a working scenario which goes through the relevant screens.
 *  The interface UpdateAccountService can be customized to enabling passing parameters to the service, and this class can consume the parameters within the relevant screens.
 */
@Service(name = "UpdateAccount")
@OpenlegacyDesigntime(editor = "WebServiceEditor")
@Component
public class UpdateAccountServiceImpl implements UpdateAccountService {

    @Autowired
    private ApplicationContext applicationContext;


    @Autowired
    private ServiceBinder serviceBinder;

    @Override
    @ServiceMethod(name = "getUpdateAccount", entities = {
            @EntityMapping(alias="updateAccount", entity=com.account_oracle_sdk.openlegacy.UpdateAccount.class)})
    @LogServiceUsage
    @BindInputs(endpoints = {
            @BindTo(endpoint = "updateAccount.paccountId", expression = "paccountId"),
            @BindTo(endpoint = "updateAccount.pcustomerId", expression = "pcustomerId"),
            @BindTo(endpoint = "updateAccount.pcustomerName", expression = "pcustomerName"),
            @BindTo(endpoint = "updateAccount.piban", expression = "piban"),
            @BindTo(endpoint = "updateAccount.pcountryCode", expression = "pcountryCode"),
            @BindTo(endpoint = "updateAccount.pbankId", expression = "pbankId"),
            @BindTo(endpoint = "updateAccount.pbrnchId", expression = "pbrnchId"),
            @BindTo(endpoint = "updateAccount.ptypcd", expression = "ptypcd"),
            @BindTo(endpoint = "updateAccount.ptypeName", expression = "ptypeName"),
            @BindTo(endpoint = "updateAccount.psubTypcd", expression = "psubTypcd"),
            @BindTo(endpoint = "updateAccount.ptypeDescription", expression = "ptypeDescription"),
            @BindTo(endpoint = "updateAccount.pbalance", expression = "pbalance"),
            @BindTo(endpoint = "updateAccount.pcurrency", expression = "pcurrency"),
            @BindTo(endpoint = "updateAccount.plocked", expression = "plocked")})
    @BindOutputs(endpoints = {
            @BindFrom(endpoint = "bankAccountObj", expression = "updateAccount.bankAccountObj")})
    public UpdateAccountOut getUpdateAccount(UpdateAccountIn updateAccountIn) throws Exception {
        UpdateAccountOut updateAccountOut = new UpdateAccountOut();
        /* autogenerated - sessions block start*/
        ;
        RpcSession accountOracleSdkSession = applicationContext.getBean("accountOracleSdkSession", RpcSession.class);
        /* autogenerated - sessions block end */
        ;

        try {
            /* autogenerated - execution block start */;
            UpdateAccount updateAccount = serviceBinder.bindInputs(this, "getUpdateAccount", "updateAccount", new UpdateAccount(), updateAccountIn);
            updateAccount = accountOracleSdkSession.doAction(ActionUtil.getRpcAction(UpdateAccount.class), updateAccount);
            /* autogenerated - execution block end */;

            /* autogenerated - output block start */;
            updateAccountOut = serviceBinder.bindOutput(this, "getUpdateAccount", updateAccountOut, new String[]{"updateAccountIn", "updateAccount"}, updateAccountIn, updateAccount);
            /* autogenerated - output block end */;

            return updateAccountOut;
        } finally {
            /* autogenerated - disconnect block start */
            ;
            accountOracleSdkSession.disconnect();
            /* autogenerated - disconnect block end */
            ;
        }
    }

}
